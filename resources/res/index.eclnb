{
    "id": "62aa4b71-3106-47ab-9c27-25139a89c385",
    "files": [],
    "nodes": [
        {
            "id": "60e51a24-1d75-4493-9f44-0ddcb69105a4",
            "name": "",
            "value": "/**\r\n  * Test and example for Model Validation.\r\n  *\r\n  * Uses the Synth module to generate M8 model.\r\n  * Tests against the M8 model definition:\r\n  * B is Exogenous\r\n  * F is Exogenous\r\n  * G is Exogenous\r\n  * A <- B,F\r\n  * D <- A,G\r\n  * C <- B,A,D\r\n  * E <- C\r\n  *\r\n  */\r\nIMPORT HPCC_Causality AS HC;\r\nIMPORT HC.Types;\r\n\r\nIMPORT ML_CORE.Types AS cTypes;\r\n\r\nProbability := HC.Probability;\r\nCausality := HC.Causality;\r\nviz := HC.viz;\r\n\r\nSEM := Types.SEM;\r\n\r\n// Number of test records.\r\nnTestRecs := 100000;\r\n\r\n\r\n// SEM should be a dataset containing a single row.\r\n// SEM is Model M8.\r\nsemRow := ROW({\r\n    [],\r\n    ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'], // Variable names\r\n    // Equations\r\n    ['B = logistic(0,1)',  // Can use any distribution defined in numpy.random\r\n    'F = logistic(0,1)',\r\n    'G = logistic(0,1)',\r\n    'A = sin(B + F) + logistic(0,.4)',\r\n    'D = tanh(A + G * 2.0) + logistic(0,.4)',\r\n    'C = tanh(B + A + D) + logistic(0,.4)',\r\n    'E = C + logistic(0,.4)',\r\n    'H = \"small\" if E < 0 else \"med\" if E < 1 else \"large\"'\r\n    ]}, SEM);\r\n\r\nmySEM := DATASET([semRow], SEM);\r\n\r\ntestDat := HC.Synth(mySEM).Generate(nTestRecs);\r\n\r\nOUTPUT(testDat, NAMED('Dat'));\r\n\r\n// Note: The order of variables in the model much match the order of varNames in the SEM.\r\n// RVs := DATASET([\r\n//                 {'A', ['B','F']},\r\n//                 {'B', []},\r\n//                 {'C', ['B', 'A', 'D']},\r\n//                 {'D', ['A','G']},\r\n//                 {'E', ['C']},\r\n//                 {'F', []},\r\n//                 {'G', []}\r\n//                 'H',\r\n//                 ], Types.RV);\r\n// mod := DATASET([{'M8', RVs}], Types.cModel);\r\n\r\nOUTPUT(mySEM, NAMED('SEM'));\r\n\r\nprob := Probability(testDat, semRow.VarNames, categoricals:=['H']);\r\n\r\n\r\nqueries := [\r\n    'P(A)',\r\n    'P(A|B)',\r\n    'E(D | A)',\r\n    'E(D | A, G)',\r\n    'P(H = med | E)',\r\n    'Correlation(A,B,C,D,E,F,G,H)',\r\n    'CModel()'\r\n    ];\r\n\r\nviz.Plot(queries, prob.PS);",
            "mode": "ecl",
            "outputs": []
        },
        {
            "id": "dd8c3039-d399-46ef-8621-55c23a0b407a",
            "name": "",
            "value": "<div id=\"_plots\"></div>",
            "mode": "html",
            "outputs": []
        },
        {
            "id": "72b404e1-109f-48db-976e-4af854fac1ae",
            "name": "",
            "value": "// These three attributes control the div name where plots are rendered, and their size.\r\n_renderPlotsTo = \"_plots\";\r\n_plotWidth = 1024;\r\n_plotHeight = 600;\r\n_colorScale = \"Rainbow\";\r\n_axesColor = \"rgb(0,0, 100)\";\r\n_axesSize = 16;\r\n_lighting = {return {ambient:.6, rougness: 1, diffuse:.2, specular:.5, fresnel:2}};",
            "mode": "js",
            "outputs": []
        },
        {
            "id": "f529a21a-c424-49bb-acfc-f1c4511d2da7",
            "name": "",
            "value": "// Attributes to process the ECL results into data usable for plotting.\r\n\r\n// An array of plot meta-data names\r\nplotNames = {\r\n    let outPlots = [];\r\n    for (let plot of __hpcc_index_html) {\r\n        outPlots.push(plot.name);\r\n    }\r\n    return outPlots;\r\n}\r\n\r\n// An array of plot meta-data contents, one record per plot\r\nplotMetas = {\r\n    let metas = [];\r\n    for (let plotname of plotNames) {\r\n        var meta = results[plotname][0];\r\n        metas.push(meta);\r\n    }\r\n    return metas;\r\n}\r\n\r\n// An array of plot data records, one record per plot\r\nplotData = {\r\n    let datasets = [];\r\n    for (let meta of plotMetas) {\r\n        var ds = results[meta.dataname];\r\n        datasets.push(ds);\r\n    }\r\n    return datasets;\r\n}\r\n\r\n// An array of transformed plot data records.  String values are transformed to numeric.\r\n// One record per plot.\r\nDataGrids = {\r\n    let outGrids = []\r\n    for (let plot of plotData){\r\n        let outL = []\r\n        var x_, y_, z_\r\n        for (let i of plot) {\r\n            if (i.x_.length == 0 || isNaN(i.x_))\r\n                x_ = i.x_;\r\n            else\r\n                x_ = parseFloat(i.x_);\r\n            if (i.y_.length == 0 || isNaN(i.y_))\r\n                y_ = i.y_;\r\n            else\r\n                y_ = parseFloat(i.y_);\r\n            if (i.z_.length == 0 || isNaN(i.z_))\r\n                z_ = i.z_;\r\n            else\r\n                z_ = parseFloat(i.z_);\r\n            outL.push({id:parseFloat(i.id), x_: x_, y_: y_, z_: z_, \r\n                    range1low:i.range1low, range1high:i.range1high, \r\n                    range2low:i.range2low, range2high: i.range2high});\r\n        }\r\n    outGrids.push(outL);\r\n    }\r\nreturn outGrids;\r\n}\r\n\r\n// The maximum Y value for each plot.  This used by 2d expectation plots.\r\nyMaxs = {\r\n    let outMaxs = [];\r\n    for (let DataGrid of DataGrids) {\r\n        var high = -999999\r\n        for (let i of DataGrid) {\r\n            if (i.y_ > high) high = i.y_;\r\n        }   \r\n        outMaxs.push(high);\r\n    }\r\n    return outMaxs;\r\n}",
            "mode": "js",
            "outputs": []
        },
        {
            "id": "8267168c-f482-4334-a0c3-a407734325e6",
            "name": "",
            "value": "// Convert the data from grid format to format used by all 2d Charts.\r\nconvertData2d = function(indx) {\r\n    let d;\r\n    let g = DataGrids[indx];\r\n    let xvals = [];\r\n    let yvals = [];\r\n    let r2H = [];\r\n    let r1H = [];\r\n    let r1L = [];\r\n    let r2L = [];\r\n    for (let i = 0; i < g.length; i++) {\r\n        let rec = g[i];\r\n        xvals.push(rec.x_);\r\n        yvals.push(rec.y_);\r\n        r2H.push(rec.range2high);\r\n        r1H.push(rec.range1high);\r\n        r1L.push(rec.range1low);\r\n        r2L.push(rec.range2low);\r\n    }\r\n    d = {x: xvals, y: yvals, r2H: r2H, r1H: r1H, r1L: r1L, r2L: r2L}\r\n\r\n    return d;\r\n}",
            "mode": "js",
            "outputs": []
        },
        {
            "id": "2e144be2-1468-4e93-8f88-05a62e2f5e4d",
            "name": "",
            "value": "// Function to produce layout information for the 2d Expectation Plot\r\ngetLayoutExp = function(indx){\r\n  let d = convertData2d(indx);\r\n  let meta = plotMetas[indx];\r\n  let title = meta.title;\r\n  let xlabel = meta.xlabel;\r\n  let ylabel = meta.ylabel;\r\n  let xvals = d.x;\r\n  let yvals = d.y;\r\n  let xticks = 10;\r\n  let yticks = 10;\r\n  if (typeof xvals[0] === 'string' || xvals[0] instanceof String)\r\n    xticks = xvals.length;\r\n  if (typeof yvals[0] === 'string' || yvals[0] instanceof String)\r\n    yticks = yvals.length;  let x_title = {text:\"state\"}\r\n  let L = {\r\n    width: _plotWidth,\r\n    height: _plotHeight,    showlegend: false, \r\n    title: {text: title, font: {size:20}},\r\n    xaxis: {\r\n      gridcolor: \"rgb(255,255,255)\", \r\n      showgrid: false, \r\n      showline: true, \r\n      showticklabels: true, \r\n      tickmode: \"auto\",\r\n      nticks: xticks,\r\n      tickcolor: \"rgb(0,0,0)\", \r\n      ticks: \"outside\",\r\n      ticklen: 5, \r\n      zeroline: false,\r\n      title: {text: xlabel, font: {size: _axesSize}},\r\n      color: _axesColor\r\n    }, \r\n    yaxis: {\r\n      gridcolor: \"rgb(255,255,255)\", \r\n      showgrid: false, \r\n      showline: true, \r\n      showticklabels: true, \r\n      tickmode: \"auto\",\r\n      nticks: yticks,\r\n      tickcolor: \"rgb(0,0,0)\", \r\n      ticks: \"outside\",\r\n      ticklen: 5,\r\n      zeroline: false,\r\n      title: {text: ylabel, font: {size: _axesSize}},\r\n      color: _axesColor\r\n    }\r\n  }\r\n  return L;\r\n};\r\n\r\n// Function to produce data (trace) information for the 2d Expectation Plot\r\ngetDataExp = function(indx) {\r\n  //let xvals = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n  let d = convertData2d(indx);\r\n  let xvals = d.x;\r\n  let yvals = d.y;\r\n  let r2Hvals = d.r2H;\r\n  let r1Hvals = d.r1H;\r\n  let r1Lvals = d.r1L;\r\n  let r2Lvals = d.r2L;\r\n  let xticks = 20;\r\n  let yticks = 20;\r\n\r\n  let rangeLines = {color: \"rgba(255, 255, 0, .5)\", width: 0.8};\r\n  let t1H = {\r\n    x: xvals,\r\n    y: r1Hvals, \r\n    fill: \"tonexty\",\r\n    line: rangeLines,\r\n    mode: \"lines\", \r\n    fillcolor: \"rgba(117, 117, 117,0.1)\",  \r\n    name: \"\", \r\n    showlegend: false, \r\n    type: \"scatter\"\r\n  }\r\n  let t1L = {\r\n    x: xvals, \r\n    y: r1Lvals, \r\n    fill: \"tonexty\", \r\n    fillcolor: \"rgba(117, 117, 117,0.2)\",  \r\n    line: rangeLines,\r\n    mode: \"lines\", \r\n    name: \"\", \r\n    showlegend: false, \r\n    type: \"scatter\"\r\n  };\r\n  let t2H = {\r\n    x: xvals,\r\n    y: r2Hvals, \r\n    line: rangeLines,\r\n    mode: \"lines\", \r\n    name: \"\", \r\n    showlegend: false, \r\n    type: \"scatter\"\r\n  }\r\n  let t2L = {\r\n    x: xvals, \r\n    y: r2Lvals, \r\n    fill: \"tonexty\", \r\n    fillcolor: \"rgba(117, 117, 117,0.1)\",  \r\n    line: rangeLines,\r\n    mode: \"lines\", \r\n    name: \"\", \r\n    showlegend: false, \r\n    type: \"scatter\"\r\n  };\r\n  let t = {\r\n    x: xvals, \r\n    y: yvals, \r\n    fill: \"tonexty\", \r\n    fillcolor: \"rgba(117, 117, 117,0.2\",  \r\n    line: {color: \"rgb(0, 0, 128)\", width:5}, \r\n    mode: \"lines\", \r\n    name: \"\", \r\n    type: \"scatter\",\r\n    showlegend: false\r\n  };\r\n  let dat = [t2H, t1H, t, t1L, t2L];\r\n  return dat;\r\n}\r\n\r\n",
            "mode": "js",
            "outputs": []
        },
        {
            "id": "3dc84b7c-d34d-4d86-b703-cfc9f3334998",
            "name": "",
            "value": "// Function to produce layout information for the 2d Probability Plot\ngetLayoutProb = function(indx){\n  let d = convertData2d(indx);\n  let meta = plotMetas[indx];\n  let title = meta.title;\n  let xlabel = meta.xlabel;\n  let ylabel = meta.ylabel;\n  let xvals = d.x;\n  let yvals = d.y;\n  let xticks = 20;\n  let yticks = 20;\n  if (typeof xvals[0] === 'string' || xvals[0] instanceof String)\n    xticks = xvals.length;\n  if (typeof yvals[0] === 'string' || yvals[0] instanceof String)\n    yticks = yvals.length;\n  let L = {\n    title: {text: title, font: {size:20}},\n    width: _plotWidth,\n    height: _plotHeight,\n    showlegend: false, \n    xaxis: {\n      gridcolor: \"rgb(255,255,255)\", \n      showgrid: false, \n      showline: true, \n      showticklabels: true, \n      tickmode: \"auto\",\n      nticks: xticks,\n      tickcolor: \"rgb(0,0,0)\", \n      ticks: \"outside\",\n      ticklen: 5, \n      zeroline: false,\n      title: {text: xlabel, font: {size: _axesSize}},\n      color: _axesColor\n    }, \n    yaxis: {\n      gridcolor: \"rgb(255,255,255)\", \n      showgrid: false, \n      showline: true, \n      showticklabels: true, \n      tickmode: \"auto\",\n      nticks: yticks,\n      tickcolor: \"rgb(0,0,0)\", \n      ticks: \"outside\",\n      ticklen: 5,\n      zeroline: false,\n      title: {text:ylabel, font: {size: _axesSize}},\n      color: _axesColor\n\n    }\n  }\n  return L;\n};\n\n// Function to produce data(trace) information for the 2d Probability Plot\ngetDataProb = function(indx) {\n  let d = convertData2d(indx);\n  let xvals = d.x;\n  let yvals = d.y;\n  let meta = plotMetas[indx];\n  let meanVal = meta.mean;\n  let r1Hval = meta.range1high;\n  let r1Lval = meta.range1low;\n  let r2Hval = meta.range2high;\n  let r2Lval = meta.range2low;\n  let yMax = yMaxs[indx];\n  let rangeLines = {color: \"rgba(255, 255, 0, .5)\", width: 0.8};\n  let mean = {\n    x: [meanVal, meanVal],\n    y: [0, yMax], \n    fill: \"tonextx\",\n    line: {color: \"rgb(0,0,0)\", width: 3},\n    mode: \"lines\", \n    fillcolor: \"rgba(117, 117, 117,0.3)\",  \n    name: \"\", \n    showlegend: false, \n    type: \"scatter\"\n  }\n  let t1H = {\n    x: [r1Hval, r1Hval],\n    y: [0, yMax], \n    fill: \"tonextx\",\n    line: rangeLines,\n    mode: \"lines\", \n    fillcolor: \"rgba(117, 117, 117,0.2)\",  \n    name: \"\", \n    showlegend: false, \n    type: \"scatter\"\n  }\n  let t1L = {\n    x: [r1Lval, r1Lval],\n    y: [0, yMax], \n    fill: \"tonextx\", \n    fillcolor: \"rgba(117, 117, 117,0.3)\",  \n    line: rangeLines,\n    mode: \"lines\", \n    name: \"\", \n    showlegend: false, \n    type: \"scatter\"\n  };\n  let t2H = {\n    //x: [\"Ja\", \"Ia\", \"Ha\", \"Ga\", \"Fa\", \"Ea\", \"Da\", \"Ca\", \"Ba\", \"Aa\"], \n    x: [r2Hval, r2Hval],\n    y: [0, yMax], \n    line: rangeLines,\n    mode: \"lines\", \n    name: \"\", \n    showlegend: false, \n    type: \"scatter\"\n  }\n  let t2L = {\n    x: [r2Lval, r2Lval],\n    y: [0, yMax],\n    fill: \"tonextx\", \n    fillcolor: \"rgba(117, 117, 117,0.2)\",  \n    line: rangeLines,\n    mode: \"lines\", \n    name: \"\", \n    showlegend: false, \n    type: \"scatter\"\n  };\n  let t = {\n    x: xvals, \n    y: yvals, \n    fill: \"tozeroy\", \n    fillcolor: \"rgba(0, 0, 255, 0.1)\",  \n    line: {color: \"rgb(0, 0, 128)\", width:5}, \n    mode: \"lines\", \n    name: \"\", \n    type: \"scatter\",\n    showlegend: false\n  };\n  let dat = [t, t2H, t1H, mean, t1L, t2L];\n  return dat;\n}",
            "mode": "js",
            "outputs": []
        },
        {
            "id": "57dd9027-e4c9-4acb-8c46-8996fa3427d2",
            "name": "",
            "value": "// Function to produce layout information for the 2d Bound Probability Plot\ngetLayoutBProb = function(indx){\n  let d = convertData2d(indx);\n  let meta = plotMetas[indx];\n  let title = meta.title;\n  let xlabel = meta.xlabel;\n  let ylabel = meta.ylabel;\n  let xvals = d.x;\n  let yvals = d.y;\n  let xticks = 20;\n  let yticks = 20;\n  if (typeof xvals[0] === 'string' || xvals[0] instanceof String)\n    xticks = xvals.length;\n  if (typeof yvals[0] === 'string' || yvals[0] instanceof String)\n    yticks = yvals.length;\n  let L = {\n    title: {text: title, font: {size:20}},\n    width: _plotWidth,\n    height: _plotHeight,\n    showlegend: false, \n    xaxis: {\n      gridcolor: \"rgb(255,255,255)\", \n      showgrid: false, \n      showline: true, \n      showticklabels: true, \n      tickmode: \"auto\",\n      nticks: xticks,\n      tickcolor: \"rgb(0,0,0)\", \n      ticks: \"outside\",\n      ticklen: 5, \n      zeroline: false,\n      title: {text: xlabel, font: {size: _axesSize}},\n      color: _axesColor\n    }, \n    yaxis: {\n      gridcolor: \"rgb(255,255,255)\", \n      showgrid: false, \n      showline: true, \n      showticklabels: true, \n      tickmode: \"auto\",\n      nticks: yticks,\n      tickcolor: \"rgb(0,0,0)\", \n      ticks: \"outside\",\n      ticklen: 5,\n      zeroline: false,\n      title: {text: ylabel, font: {size: _axesSize}},\n      color: _axesColor\n    }\n  }\n  return L;\n};\n\n// Function to produce data (traces) for the 2d Bound Probability Plot\ngetDataBProb = function(indx) {\n  let d = convertData2d(indx);\n  let xvals = d.x;\n  let yvals = d.y;\n  let t = {\n    x: xvals, \n    y: yvals, \n    fill: \"tozeroy\", \n    fillcolor: \"rgba(0, 0, 255, 0.1)\",  \n    line: {color: \"rgb(0, 0, 128)\", width:5}, \n    mode: \"lines\", \n    name: \"\", \n    type: \"scatter\",\n    showlegend: false\n  };\n  let dat = [t];\n  return dat;\n}",
            "mode": "js",
            "outputs": []
        },
        {
            "id": "bbcfdb04-6f90-4792-8d51-9381cec53a39",
            "name": "",
            "value": "// Functions to create the layout and data structures for the 3d graph\ngetLayout3d = function(indx) { \n    let meta = plotMetas[indx];\n    let title = meta.title;\n    let xlabel = meta.xlabel;\n    let ylabel = meta.ylabel;\n    let zlabel = meta.zlabel;\n    let pTitle;\n    let layout = {\n        title: {text: title, font:{size: 20}},\n        scene: {\n            xaxis: {\n                color: _axesColor,\n                title: {text: xlabel, font: {size: _axesSize}}\n            },\n            yaxis: {\n                color: _axesColor,\n                title: {text: ylabel, font: {size: _axesSize}}\n            },\n            zaxis: {\n                color: _axesColor,\n                title: {text: zlabel, font: {size: _axesSize}}\n            },\n            camera: {\n                center: {z:-.2},\n                eye: {x: -1.7, y: -1.7, z: 0.25},\n                light: {x:2,y:1, z:.5}\n            },\n            aspectratio: {x: 1,y: 1,z: 1},\n            aspectmode: \"auto\",\n        },\n        autosize: true,\n        width: _plotWidth,\n        height: _plotHeight,\n        margin: {l: 20, r: 20, b: 20, t: 50},\n    }\n    return layout;\n}\n\ngetData3d = function(indx) {\n    let x = [];\n    let y = [];\n    let z = [];\n    let plotDat = DataGrids[indx];\n    for (let i=0;i < plotDat.length; i++) {\n        let rec = plotDat[i];\n        x.push(rec.x_);\n        y.push(rec.y_);\n        z.push(rec.z_);\n    }\n    let ux = Array.from(new Set(x));\n    let uy = Array.from(new Set(y));\n    let uz = []\n    for (let i = 0; i < uy.length; i++) {\n        let row = [];\n        for (let j = 0; j < ux.length; j++) {\n            let zindx = j * uy.length + i;\n            row.push(z[zindx]);\n        }\n        uz.push(row);\n    }\n    let outData = [{  x: ux,\n            y: uy,\n            z: uz,\n            type: 'surface',\n            colorscale: _colorScale,\n            lighting: _lighting,\n            lightposition: {x:100, y:200, z:100},\n            contours: {z: \n                {\n                    show:true,\n                    usecolormap: true,\n                    highlightcolor:\"#42f462\",\n                    project: {z: true}\n                }\n            }\n        }]\n    return outData\n};",
            "mode": "js",
            "outputs": []
        },
        {
            "id": "4b7bd283-1dfb-407e-9e50-375809403aa5",
            "name": "",
            "value": "// Functions to create the layout and data structures for the Heatmap graph\r\ngetLayoutHM = function(indx) { \r\n    let meta = plotMetas[indx];\r\n    let title = meta.title;\r\n    let minVal = -1.0;\r\n    let midVal = 0.0\r\n    let colorscale = \"RdBu\";\r\n    if (meta.qtype == 'dep') {\r\n        minVal = 0.0;\r\n        midVal = .5\r\n        colorscale = \"Blues\";\r\n    } \r\n    let xlabel = meta.xlabel;\r\n    let ylabel = meta.ylabel;\r\n    let annotations = [];\r\n    let plotData = DataGrids[indx];\r\n    for (let d of plotData){\r\n        let val = +d.z_.toFixed(2);\r\n        let tcolor = \"rgb(0, 0, 0)\";\r\n        if (Math.abs(val) > .35)\r\n            tcolor = \"rgb(240, 240, 240)\";\r\n        \r\n        let a = {xref:\"x1\", yref:\"y1\", showarrow: false, x: d.x_, y: d.y_, text:val, \r\n                font:{family:\"Arial\", color: tcolor, size:12}}\r\n        annotations.push(a);\r\n    }\r\n\r\n    let layout = {\r\n        title: {text: title, font:{size: 20}},\r\n        autosize: true,\r\n        width: _plotWidth,\r\n        height: _plotHeight,\r\n        plot_bgcolor: _axesColor,\r\n        xaxis: {\r\n            showgrid: false, \r\n            showline: true, \r\n            showticklabels: true, \r\n            tickmode: \"auto\",\r\n            tickcolor: \"rgb(0,0,0)\", \r\n            ticks: \"outside\",\r\n            ticklen: 5, \r\n            zeroline: false,\r\n            title: {text: xlabel, font: {size: _axesSize}},\r\n            color: _axesColor\r\n        }, \r\n        yaxis: {\r\n            showgrid: false, \r\n            showline: true, \r\n            showticklabels: true, \r\n            tickmode: \"auto\",\r\n            tickcolor: \"rgb(0,0,0)\", \r\n            ticks: \"outside\",\r\n            ticklen: 5,\r\n            zeroline: false,\r\n            title: {text: ylabel, font: {size: _axesSize}},\r\n            color: _axesColor\r\n        },\r\n        coloraxis: {\r\n            colorscale: colorscale,\r\n            cmax: 1.0, cmin: minVal,\r\n            cmid: midVal,\r\n            reversescale:true\r\n        },\r\n        annotations: annotations\r\n    }\r\n    return layout;\r\n}\r\n\r\ngetDataHM = function(indx) {\r\n    let x = [];\r\n    let y = [];\r\n    let z = [];\r\n    let plotDat = DataGrids[indx];\r\n    for (let i=0;i < plotDat.length; i++) {\r\n        let rec = plotDat[i];\r\n        x.push(rec.x_);\r\n        y.push(rec.y_);\r\n        z.push(rec.z_);\r\n    }\r\n    let ux = Array.from(new Set(x));\r\n    let uy = Array.from(new Set(x));\r\n    let uz = []\r\n    // Fill the z matrix with nulls\r\n    for (let i = 0; i < uy.length; i++) {\r\n        let row = [];\r\n        for (let j = 0; j < ux.length; j++) {\r\n            row.push(null);\r\n        }\r\n        uz.push(row);\r\n    }\r\n    // Now update any values present in data grid\r\n    for (let zindx = 0; zindx < z.length; zindx++){\r\n        let zval = z[zindx];\r\n        let yval = y[zindx];\r\n        let xval = x[zindx];\r\n        let yindx = uy.indexOf(yval);\r\n        let xindx = ux.indexOf(xval);\r\n        uz[yindx][xindx] = zval;\r\n    }\r\n    let outData = [{\r\n            x: ux,\r\n            y: uy,\r\n            z: uz,\r\n            xgap:2,\r\n            ygap:2,\r\n            type: 'heatmap',\r\n            coloraxis: \"coloraxis\"\r\n        }\r\n        ]\r\n    return outData\r\n}; // Heatmap Plot",
            "mode": "js",
            "outputs": []
        },
        {
            "id": "a89d3588-7876-42b9-92d9-28b0f3780d1e",
            "name": "",
            "value": "// Functions to create the layout and data structures for the Causal Model graph\ngetInfoCM = function(indx) {\n    let plotData = DataGrids[indx];\n    let aspectR = _plotWidth / _plotHeight;\n    let rawvars = [];\n    let varPositions = []\n    let edgeDefs = [];\n    for (let d of plotData) {\n        rawvars.push(d.x_);\n        if (d.y_.length > 0)\n            rawvars.push(d.y_);\n    }\n    let vars = Array.from(new Set(rawvars));\n    let nVars = vars.length;\n    let pi = Math.PI;\n    let angle = 2 * pi / nVars;\n    let startAngle = pi / 2;\n    for (let v in vars) {\n        let currAngle = startAngle - (v * angle)\n        let xpos = Math.cos(currAngle) * 100;\n        let ypos = Math.sin(currAngle) * 100;\n        varPositions.push({ang: currAngle, xpos:xpos, ypos:ypos});\n    }\n    for (let d of plotData) {\n        let causeVar = d.x_;\n        let effVar = d.y_;\n        let strength = d.z_;\n        // We overlay range1low and rnage1high to hold correlation\n        // and Maximum Direct Effect (MDE) respectively.\n        let correlation = d.range1low;\n        let mde = d.range1high;\n        if (effVar.length > 0) {\n            let causeInd = vars.indexOf(causeVar);\n            let effInd = vars.indexOf(effVar);\n            let causePos = varPositions[causeInd];\n            let effPos = varPositions[effInd];\n            let edef = {startPos:causePos, endPos: effPos, strength: strength,\n                        correlation: correlation, mde: mde};\n            edgeDefs.push(edef);\n        }\n    }\n    let info = {vars:vars, varPositions: varPositions, edgeDefs: edgeDefs}\n    return info;\n}\n\ngetLayoutCM = function(indx) { \n    let meta = plotMetas[indx];\n    let title = meta.title;\n    let xlabel = meta.xlabel;\n    let ylabel = meta.ylabel;\n    let pTitle = \"Causal Model\";\n    let annotations = [];\n    let info = getInfoCM(indx);\n    let vars = info.vars;\n    let nVars = vars.length;\n    let varSize = 75;\n    if (nVars > 10) {\n        varSize = varSize - varSize * (nVars - 10) * .05;\n        if (varSize < 20)\n            varSize = 20;\n    }\n    for (let i in vars) {\n        let tcolor = \"rgb(0, 0, 0)\";\n        let v = vars[i];\n        let pos = info.varPositions[i];\n\n        let a = {xref:\"x1\", yref:\"y1\", showarrow: false, x: pos.xpos, y: pos.ypos, text: v,\n                font:{family:\"Arial\", color: tcolor, size:16}}\n        annotations.push(a);\n    }\n    let edges = info.edgeDefs;\n    let labelAnnotations = []\n    for (let e of edges) {\n        let startPos = e.startPos;\n        let endPos = e.endPos;\n        let strength = e.strength;\n        let correlation = e.correlation;\n        //let correlation = -1;\n        let mde = e.mde;\n        let tcolor;\n        let green = 0;\n        let red = 0;\n        let blue = 0;\n        let minSat = .2;\n        let gain = 1.0 - minSat;\n        if (correlation >= 0) {\n            red = 1;\n            green = 101;\n            blue = 93;\n        }\n        else {\n            red = 139;\n            green = 80;\n            blue = 9.9;\n        }\n        let sat = minSat + gain * Math.abs(correlation);\n        let arrowside = \"end\";\n        let arrowsize = .75\n        let startarrowsize = .1;\n        let standoff = varSize / 2 + 2;\n        if (strength < .1)\n            arrowside = \"start+end\";\n            startarrowsize = arrowsize - (strength * 5 * arrowsize);\n        tcolor = \"rgb(\" + red.toString() + \",\" + green.toString() + \",\" + blue.toString() + \")\";\n        let a = {xref:\"x1\", yref:\"y1\", showarrow: true, xref:\"x\", axref:\"x\",\n                yref:\"y\", ayref:\"y\", x: endPos.xpos, y: endPos.ypos, ax: startPos.xpos, ay: startPos.ypos, \n                text:\"\", arrowsize: .75, \n                arrowwidth:5, opacity:sat, arrowside:arrowside, startarrowsize:startarrowsize, arrowhead:2, startarrowhead:3,\n                arrowcolor: tcolor, standoff: standoff, startstandoff: standoff, \n                font:{family:\"Arial\", color: tcolor, size:12}}\n        annotations.push(a);\n        let labeloffset = .55;\n        let labelx = startPos.xpos + (endPos.xpos - startPos.xpos) * labeloffset;\n        let labely = startPos.ypos + (endPos.ypos - startPos.ypos) * labeloffset;\n        let label = {xref:\"x1\", yref:\"y1\", showarrow: false, x: labelx, y: labely, text: correlation.toFixed(2), \n                bgcolor:\"rgba(255,255,255,.65)\",\n                font:{family:\"Arial\", color: \"rgb(0,0,0)\", size:12}}\n        labelAnnotations.push(label);\n    }\n    for (let a of labelAnnotations)\n        annotations.push(a);\n    //annotations = annotations + labelAnnotations;\n    let layout = {\n        title: {text: title, font:{size: 20}},\n        autosize: true,\n        width: _plotWidth,\n        height: _plotHeight,\n         margin: {l:10, r:10, t:50, b:10},\n        xaxis: {\n            showgrid: false, \n            showline: false, \n            showticklabels: false, \n            zeroline: false,\n            title: {text: xlabel, font: {size: _axesSize}},\n            color: _axesColor\n        }, \n        yaxis: {\n           showgrid: false, \n            showline: false, \n            showticklabels: false, \n            zeroline: false,\n            title: {text: ylabel, font: {size: _axesSize}},\n            color: _axesColor\n        },\n        annotations: annotations\n    }\n    return layout;\n}\n\ngetDataCM = function(indx) {\n    let info = getInfoCM(indx);\n    let vars = info.vars;\n    let nVars = vars.length;\n    let varSize = 75;\n    if (nVars > 10) {\n        varSize = varSize - varSize * (nVars - 10) * .05;\n        if (varSize < 20)\n            varSize = 20;\n    }\n    let markerX = [];\n    let markerY = [];\n    for (let i in vars) {\n        let tcolor = \"rgb(0, 255, 0)\";\n        //if (Math.abs(val) > .35)\n        //    tcolor = \"rgb(240, 240, 240)\";\n        let v = vars[i];\n        let pos = info.varPositions[i];\n        markerX.push(pos.xpos);\n        markerY.push(pos.ypos);\n    }\n    let colors = [\"rgb(251,180,174)\", \"rgb(179,205,227)\", \"rgb(204,235,197)\",\"rgb(222,203,228)\",\"rgb(254,217,166)\",\n                \"rgb(179, 266, 205)\",\"rgb(229,216,189)\",\"rgb(255,219,236)\",\"rgb(204,204,204)\", \"rgb(253, 205, 172\",\n                \"rgb(230,245, 201\"];\n    let allcolors = [];\n    for (let i = 0;i < 50; i++) {\n        let c = colors[i % colors.length];\n        allcolors.push(c);\n    }\n    let outData = [{\n            x: markerX,\n            y: markerY,\n            mode: \"markers\",\n            marker: {\n                size: varSize,\n                color: allcolors\n            }\n        }];\n    return outData\n}; // Causal Model",
            "mode": "js",
            "outputs": []
        },
        {
            "id": "101aa325-b757-4f8b-9d4b-f919bd3315a1",
            "name": "",
            "value": "Plotly = require(\"https://cdn.plot.ly/plotly-latest.min.js\")\r\n\r\n// Create a single 2d plot using the index into the ECL return __hpcc_index_html list.\r\ncreate2dPlot = function(indx) {\r\n    var layout2d;\r\n    var data2d;\r\n    let qtype = plotMetas[indx].qtype;\r\n    if (qtype == 'prob'){\r\n        layout2d = getLayoutProb(indx);\r\n        data2d = getDataProb(indx);\r\n    }\r\n    else if (qtype == 'expct') {\r\n        layout2d = getLayoutExp(indx);\r\n        data2d = getDataExp(indx);\r\n    }\r\n    else if (qtype == 'bprob') {\r\n        layout2d = getLayoutBProb(indx);\r\n        data2d = getDataBProb(indx);\r\n    }\r\n    let div2d = document.createElement(\"div\");\r\n    let config = {\r\n        modeBarButtonsToRemove: ['pan','orbitRotation', 'resetCameraDefault3d'],\r\n        responsive: true,\r\n        scrollZoom: false\r\n    }\r\n    Plotly.newPlot(div2d, data2d, layout2d);\r\n    return div2d;\r\n}\r\n\r\n// Create a single 3d plot using the index into the ECL return __hpcc_index_html list.\r\ncreate3dPlot = function(indx) {\r\n    let layout3d = getLayout3d(indx);\r\n    let data3d = getData3d(indx);\r\n    let div3d = document.createElement(\"div\");\r\n    let config = {\r\n        modeBarButtonsToRemove: ['pan3d','orbitRotation', 'resetCameraDefault3d'],\r\n        responsive: true,\r\n        scrollZoom: false\r\n    }\r\n    Plotly.newPlot(div3d, data3d, layout3d, config);\r\n    return div3d;\r\n}\r\n\r\n// Create a single heatmap plot based on the index.\r\ncreateSpecialPlot = function(indx) {\r\n    let layoutSP;\r\n    let dataSP;\r\n    let qtype = plotMetas[indx].qtype;\r\n    if (qtype == 'cmodel') {\r\n        layoutSP = getLayoutCM(indx);\r\n        dataSP = getDataCM(indx);\r\n    }\r\n    else {\r\n        layoutSP = getLayoutHM(indx);\r\n        dataSP = getDataHM(indx);\r\n    }\r\n    let divSP = document.createElement(\"div\");\r\n    let config = {\r\n        modeBarButtonsToRemove: ['pan3d','orbitRotation', 'resetCameraDefault3d'],\r\n        responsive: true,\r\n        scrollZoom: false\r\n    }\r\n    Plotly.newPlot(divSP, dataSP, layoutSP);\r\n    return divSP;\r\n}",
            "mode": "js",
            "outputs": []
        },
        {
            "id": "ca2ac26e-4be5-4e2a-bcfe-d311fce9dee7",
            "name": "",
            "value": "// Top level plotting functions.\r\n\r\n// Function to create all of the plots.  2d and 3d plots use\r\n// different libraries.\r\n// Returns a list of html elements containing the plots.\r\ncreatePlots = function() {\r\n    let plots = [];\r\n    for (let i in plotMetas) {\r\n        let plotMeta = plotMetas[i];\r\n        let ndims = parseInt(plotMeta.dims);\r\n        let qtype = plotMeta.qtype;\r\n        let newPlot\r\n        if (qtype == 'dep' || qtype == 'cor' || qtype == 'cmodel') {\r\n            // Dependency or correlation heatmap\r\n            newPlot = createSpecialPlot(i);\r\n        }\r\n        else if (ndims == 3) {\r\n            newPlot = create3dPlot(i);\r\n        }\r\n        else {\r\n            newPlot = create2dPlot(i);\r\n        }\r\n        plots.push(newPlot);\r\n    }\r\n    return plots;\r\n}\r\n\r\n// Function to render all of the plots into a given <div>\r\n// specified by elemId.  Plots is the set of elements returned\r\n// by createPlots.\r\nrenderPlots = function(elemId, plots) {\r\n    let div = document.getElementById(elemId);\r\n    div.innerHTML = \"\";\r\n    for (let plot of plots) {\r\n        div.append(plot);\r\n        let hr = document.createElement(\"hr\",{\"height\":\"10px\", \"border-width\":\"0\", \"background-color\":\"#000000\"});\r\n        hr.setAttribute('size', '0px');\r\n        hr.setAttribute('color', '#000000');\r\n        hr.setAttribute('border-width', \"0\");\r\n        hr.setAttribute('noshade', \"true\");\r\n        div.append(hr);\r\n    }\r\n    return;\r\n}",
            "mode": "js",
            "outputs": []
        },
        {
            "id": "9142cb5d-6776-4470-a2bc-5d8e16313864",
            "name": "",
            "value": "// Create and render the plots\r\nplots = createPlots();\r\nrenderPlots(\"_plots\", plots);",
            "mode": "js",
            "outputs": []
        }
    ]
}